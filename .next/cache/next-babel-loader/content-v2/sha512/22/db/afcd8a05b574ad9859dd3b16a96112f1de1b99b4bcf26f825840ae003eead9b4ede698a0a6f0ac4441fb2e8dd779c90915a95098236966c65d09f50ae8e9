{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kaiofhs/\\xC1rea de Trabalho/Rocketseat-NLW-05/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useContext, useState } from \"react\";\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContexProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = isShuffling || currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      isPlaying: isPlaying,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      togglePlay: togglePlay,\n      isShuffling: isShuffling,\n      toggleShuffle: toggleShuffle,\n      setPlayingState: setPlayingState,\n      hasPrevious: hasPrevious,\n      hasNext: hasNext,\n      toggleLoop: toggleLoop,\n      isLooping: isLooping\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlayerContexProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContexProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContexProvider\");","map":{"version":3,"sources":["/home/kaiofhs/Área de Trabalho/Rocketseat-NLW-05/src/contexts/PlayerContext.tsx"],"names":["createContext","useContext","useState","PlayerContext","PlayerContexProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nextRandomEpisodeIndex","Math","floor","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, ReactNode, useContext, useState } from \"react\";\n\ntype Episode = {\n  title: string;\n  members: string;\n  thumbnail: string;\n  duration: number;\n  url: string;\n};\n\ntype PlayerContextData = {\n  episodeList: Episode[];\n  currentEpisodeIndex: number;\n  isPlaying: boolean;\n  isLooping: boolean;\n  isShuffling: boolean;\n  play: (episode: Episode) => void;\n  playList: (list: Episode[], index: number) => void;\n  togglePlay: () => void;\n  toggleShuffle: () => void;\n  toggleLoop: () => void;\n  setPlayingState: (state: boolean) => void;\n  playNext: () => void;\n  playPrevious: () => void;\n  hasPrevious: boolean;\n  hasNext: boolean;\n};\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\ntype PlayerContextProviderProps = {\n  children: ReactNode;\n}\n\nexport function PlayerContexProvider({ children }: PlayerContextProviderProps) {\n\n  const [episodeList, setEpisodeList] = useState([]);\n  const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [isLooping, setIsLooping] = useState(false);\n  const [isShuffling, setIsShuffling] = useState(false);\n\n  function play(episode: Episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list: Episode[], index: number) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state: boolean) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = isShuffling || (currentEpisodeIndex + 1) < episodeList.length;\n\n\n  function playNext() {\n    if (isShuffling) {\n      const nextRandomEpisodeIndex = Math.floor(Math.random() * episodeList.length);\n      setCurrentEpisodeIndex(nextRandomEpisodeIndex);\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return (\n    <PlayerContext.Provider\n      value={{\n        episodeList,\n        currentEpisodeIndex,\n        play,\n        playList,\n        isPlaying,\n        playNext,\n        playPrevious,\n        togglePlay,\n        isShuffling,\n        toggleShuffle,\n        setPlayingState,\n        hasPrevious,\n        hasNext,\n        toggleLoop,\n        isLooping\n      }}>\n\n      {children}\n\n    </PlayerContext.Provider>\n  )\n}\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n}"]},"metadata":{},"sourceType":"module"}